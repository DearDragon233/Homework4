install.packages("jsonlite")
# 安装 jsonlite 包（如果尚未安装）
if (!require(jsonlite)) {
install.packages("jsonlite")
}
# 加载 jsonlite 包
library(jsonlite)
# 读取 JSON 文件
data <- fromJSON("national_administrative_divisions.json")
# 读取 JSON 文件
data <- fromJSON("Data/Resource/json.json")
# 读取 JSON 文件
data <- fromJSON("Data/Resource/json.json")
# 提取天津的数据
tianjin_data <- data[data$name == "天津市", ]
# 加载必要的包
library(jsonlite)
library(sf)
library(randomForest)
library(caret)
library(terra)
library(lattice)
library(terra)
# 读取天津市区级行政区划的 JSON 文件
json_path <- "D:\\GithubP\\Homework4\\Data\\Resource\\天津市.json"
tianjin_districts <- st_read(json_path)
# 读取土壤特征的 tif 文件
clay_raster <- rast("Data/Resource/TJ-土壤黏粒含量-250/clay_0_5cm_mean.tif")
nitrogen_raster <- rast("Data/Resource/TJ-土壤全氮含量-250/nitrogen_0_5cm_mean.tif")
ph_raster <- rast("Data/Resource/TJ-土壤酸碱度-250/phh2o_0_5cm_mean.tif")
ocd_raster <- rast("Data/Resource/TJ-土壤有机碳密度-250/ocd_0_5cm_mean.tif")
# 假设你之前已经有处理好的土壤数据，这里重新构建数据框
# 提取每个地块的土壤特征
clay_values <- extract(clay_raster, tianjin_districts, fun = mean, na.rm = TRUE)
nitrogen_values <- extract(nitrogen_raster, tianjin_districts, fun = mean, na.rm = TRUE)
library(jsonlite)
library(sf)
library(randomForest)
library(caret)
library(terra)
library(ggplot2)
# 读取天津市区级行政区划的 JSON 文件
json_path <- "D:\\GithubP\\Homework4\\Data\\Resource\\天津市.json"
tianjin_districts <- st_read(json_path)
# 读取土壤类型的 shapefile 文件
soil_type_path <- "Data\\Resource\\TJ-Landkind(2018)-1m\\tianjin100.shp"
soil_type_data <- st_read(soil_type_path)
# 读取土壤特征的 tif 文件
clay_raster_path <- "Data/Resource/TJ-土壤黏粒含量-250/clay_0_5cm_mean.tif"
nitrogen_raster_path <- "Data/Resource/TJ-土壤全氮含量-250/nitrogen_0_5cm_mean.tif"
ph_raster_path <- "Data/Resource/TJ-土壤酸碱度-250/phh2o_0_5cm_mean.tif"
ocd_raster_path <- "Data/Resource/TJ-土壤有机碳密度-250/ocd_0_5cm_mean.tif"
clay_raster <- rast(clay_raster_path)
nitrogen_raster <- rast(nitrogen_raster_path)
ph_raster <- rast(ph_raster_path)
ocd_raster <- rast(ocd_raster_path)
# 确保两个空间数据的坐标系一致
soil_type_data <- st_transform(soil_type_data, st_crs(tianjin_districts))
# 找出每个土壤样本所在的行政区
district_indices <- st_intersects(soil_type_data, tianjin_districts)
ph_values <- extract(ph_raster, vect(soil_type_data), fun = mean, na.rm = TRUE)
ocd_values <- extract(ocd_raster, vect(soil_type_data), fun = mean, na.rm = TRUE)
clay_raster <- rast(clay_raster_path, crs = "EPSG:4326")
nitrogen_raster <- rast(nitrogen_raster_path, crs = "EPSG:4326")
ph_raster <- rast(ph_raster_path, crs = "EPSG:4326")
ocd_raster <- rast(ocd_raster_path, crs = "EPSG:4326")
# 确保两个空间数据的坐标系一致
soil_type_data <- st_transform(soil_type_data, st_crs(tianjin_districts))
# 找出每个土壤样本所在的行政区
district_indices <- st_intersects(soil_type_data, tianjin_districts)
# 加载必要的包
library(sf)
library(terra)
library(randomForest)
library(caret)
# 读取天津市区级行政区划的 JSON 文件
json_path <- "D:\\GithubP\\Homework4\\Data\\Resource\\天津市.json"
tianjin_districts <- st_read(json_path)
# 读取土壤特征的 tif 文件
clay_raster <- rast("Data/Resource/TJ-土壤黏粒含量-250/clay_0_5cm_mean.tif")
nitrogen_raster <- rast("Data/Resource/TJ-土壤全氮含量-250/nitrogen_0_5cm_mean.tif")
ph_raster <- rast("Data/Resource/TJ-土壤酸碱度-250/phh2o_0_5cm_mean.tif")
ocd_raster <- rast("Data/Resource/TJ-土壤有机碳密度-250/ocd_0_5cm_mean.tif")
# 读取天津市土地类型的 shapefile 文件
land_type_path <- "Data/Resource/TJ-Landkind(2018)-1m/tianjin100.shp"
land_type_data <- st_read(land_type_path)
# 确保所有数据的坐标参考系统一致
land_type_data <- st_transform(land_type_data, st_crs(tianjin_districts))
# 找出每个土地类型样本所在的行政区
district_indices <- st_intersects(land_type_data, tianjin_districts)
# 尝试修复土地类型数据的几何图形
land_type_data <- st_make_valid(land_type_data)
# 找出每个土地类型样本所在的行政区
district_indices <- st_intersects(land_type_data, tianjin_districts)
# 提取每个地块的土壤特征
clay_values <- extract(clay_raster, vect(land_type_data), fun = mean, na.rm = TRUE)
nitrogen_values <- extract(nitrogen_raster, vect(land_type_data), fun = mean, na.rm = TRUE)
ph_values <- extract(ph_raster, vect(land_type_data), fun = mean, na.rm = TRUE)
ocd_values <- extract(ocd_raster, vect(land_type_data), fun = mean, na.rm = TRUE)
# 假设土地类型数据中有一个名为 "land_type" 的列
if ("land_type" %in% names(land_type_data)) {
land_type <- land_type_data$land_type
} else {
stop("土地类型数据文件中缺少 'land_type' 列，请检查文件或修改代码。")
}
# 组织成数据框
soil_land_data <- data.frame(
clay = clay_values,
nitrogen = nitrogen_values,
ph = ph_values,
ocd = ocd_values,
亚类 = tianjin_shp$亚类,  # 目标变量
土类 = tianjin_shp$土类,  # 目标变量
土纲 = tianjin_shp$土纲,  # 目标变量
district = sapply(district_indices, function(x) if (length(x) > 0) tianjin_districts$name[x] else NA)
)
# 读取天津市土地类型的 shapefile 文件
land_type_path <- "Data/Resource/TJ-Landkind(2018)-1m/tianjin100.shp"
land_type_data <- st_read(land_type_path)
tianjin_shp <- vect(land_type_path)
# 确保所有数据的坐标参考系统一致
land_type_data <- st_transform(land_type_data, st_crs(tianjin_districts))
# 尝试修复土地类型数据的几何图形
land_type_data <- st_make_valid(land_type_data)
# 找出每个土地类型样本所在的行政区
district_indices <- st_intersects(land_type_data, tianjin_districts)
# 提取每个地块的土壤特征
clay_values <- extract(clay_raster, vect(land_type_data), fun = mean, na.rm = TRUE)
nitrogen_values <- extract(nitrogen_raster, vect(land_type_data), fun = mean, na.rm = TRUE)
ph_values <- extract(ph_raster, vect(land_type_data), fun = mean, na.rm = TRUE)
ocd_values <- extract(ocd_raster, vect(land_type_data), fun = mean, na.rm = TRUE)
# 组织成数据框
soil_land_data <- data.frame(
clay = clay_values,
nitrogen = nitrogen_values,
ph = ph_values,
ocd = ocd_values,
亚类 = tianjin_shp$亚类,  # 目标变量
土类 = tianjin_shp$土类,  # 目标变量
土纲 = tianjin_shp$土纲,  # 目标变量
district = sapply(district_indices, function(x) if (length(x) > 0) tianjin_districts$name[x] else NA)
)
# 提取每个地块的土壤特征
clay_values <- extract(clay_raster, tianjin_shp, fun = mean, na.rm = TRUE)
nitrogen_values <- extract(nitrogen_raster, tianjin_shp, fun = mean, na.rm = TRUE)
ph_values <- extract(ph_raster, tianjin_shp, fun = mean, na.rm = TRUE)
ocd_values <- extract(ocd_raster, tianjin_shp, fun = mean, na.rm = TRUE)
# 组织成数据框
soil_land_data <- data.frame(
clay = clay_values,
nitrogen = nitrogen_values,
ph = ph_values,
ocd = ocd_values,
亚类 = tianjin_shp$亚类,  # 目标变量
土类 = tianjin_shp$土类,  # 目标变量
土纲 = tianjin_shp$土纲,  # 目标变量
district = sapply(district_indices, function(x) if (length(x) > 0) tianjin_districts$name[x] else NA)
)
# 提取每个地块的土壤特征
clay_values <- extract(clay_raster, tianjin_shp, fun = mean, na.rm = TRUE)
nitrogen_values <- extract(nitrogen_raster, tianjin_shp, fun = mean, na.rm = TRUE)
ph_values <- extract(ph_raster, tianjin_shp, fun = mean, na.rm = TRUE)
ocd_values <- extract(ocd_raster, tianjin_shp, fun = mean, na.rm = TRUE)
# 组织成数据框
soil_data <- data.frame(
clay = clay_values,
nitrogen = nitrogen_values,
ph = ph_values,
ocd = ocd_values,
亚类 = tianjin_shp$亚类,  # 目标变量
土类 = tianjin_shp$土类,  # 目标变量
土纲 = tianjin_shp$土纲   # 目标变量
)
# 提取每个地块的土壤特征
clay_values <- extract(clay_raster, tianjin_shp, fun = mean, na.rm = TRUE)
nitrogen_values <- extract(nitrogen_raster, tianjin_shp, fun = mean, na.rm = TRUE)
ph_values <- extract(ph_raster, tianjin_shp, fun = mean, na.rm = TRUE)
ocd_values <- extract(ocd_raster, tianjin_shp, fun = mean, na.rm = TRUE)
# 组织成数据框
soil_land_data <- data.frame(
clay = clay_values,
nitrogen = nitrogen_values,
ph = ph_values,
ocd = ocd_values,
亚类 = tianjin_shp$亚类,  # 目标变量
土类 = tianjin_shp$土类,  # 目标变量
土纲 = tianjin_shp$土纲,  # 目标变量
district = sapply(district_indices, function(x) if (length(x) > 0) tianjin_districts$name[x] else NA)
)
# 读取数据后统一设置 CRS
# 假设目标 CRS 是 EPSG:4326，你可以根据实际情况修改
target_crs <- "EPSG:4326"
# 设置栅格数据的 CRS
clay_raster <- project(clay_raster, target_crs)
nitrogen_raster <- project(nitrogen_raster, target_crs)
ph_raster <- project(ph_raster, target_crs)
ocd_raster <- project(ocd_raster, target_crs)
# 设置矢量数据的 CRS
tianjin_shp <- st_transform(tianjin_shp, target_crs)
# 设置矢量数据的 CRS
tianjin_shp <- st_transform(tianjin_shp, target_crs)
tianjin_districts <- st_transform(tianjin_districts, target_crs)
# 设置矢量数据的 CRS
tianjin_shp <- project(tianjin_shp, target_crs)
tianjin_districts <- st_transform(tianjin_districts, target_crs)
# 确保所有数据的坐标参考系统一致
land_type_data <- st_transform(land_type_data, st_crs(tianjin_districts))
# 尝试修复土地类型数据的几何图形
land_type_data <- st_make_valid(land_type_data)
# 找出每个土地类型样本所在的行政区
district_indices <- st_intersects(land_type_data, tianjin_districts)
# 提取每个地块的土壤特征
clay_values <- extract(clay_raster, tianjin_shp, fun = mean, na.rm = TRUE)
nitrogen_values <- extract(nitrogen_raster, tianjin_shp, fun = mean, na.rm = TRUE)
ph_values <- extract(ph_raster, tianjin_shp, fun = mean, na.rm = TRUE)
ocd_values <- extract(ocd_raster, tianjin_shp, fun = mean, na.rm = TRUE)
# 组织成数据框
soil_land_data <- data.frame(
clay = clay_values,
nitrogen = nitrogen_values,
ph = ph_values,
ocd = ocd_values,
亚类 = tianjin_shp$亚类,  # 目标变量
土类 = tianjin_shp$土类,  # 目标变量
土纲 = tianjin_shp$土纲,  # 目标变量
district = sapply(district_indices, function(x) if (length(x) > 0) tianjin_districts$name[x] else NA)
)
# 找出每个土地类型样本所在的行政区
district_indices <- st_intersects(land_type_data, tianjin_districts)
# 组织成数据框
soil_land_data <- data.frame(
clay = clay_values,
nitrogen = nitrogen_values,
ph = ph_values,
ocd = ocd_values,
亚类 = tianjin_shp$亚类,  # 目标变量
土类 = tianjin_shp$土类,  # 目标变量
土纲 = tianjin_shp$土纲,  # 目标变量
district = sapply(district_indices, function(x) if (length(x) > 0) tianjin_districts$name[x] else NA)
)
# 检查各列数据的行数
cat("clay_values 的行数：", length(clay_values), "\n")
cat("nitrogen_values 的行数：", length(nitrogen_values), "\n")
cat("ph_values 的行数：", length(ph_values), "\n")
cat("ocd_values 的行数：", length(ocd_values), "\n")
cat("tianjin_shp 的行数：", nrow(tianjin_shp), "\n")
cat("district_indices 的长度：", length(district_indices), "\n")
# 读取数据后统一设置 CRS
# 假设目标 CRS 是 EPSG:4326，你可以根据实际情况修改
target_crs <- "EPSG:4326"
# 设置栅格数据的 CRS
clay_raster <- project(clay_raster, target_crs)
nitrogen_raster <- project(nitrogen_raster, target_crs)
ph_raster <- project(ph_raster, target_crs)
ocd_raster <- project(ocd_raster, target_crs)
# 读取天津市土地类型的 shapefile 文件
land_type_path <- "Data/Resource/TJ-Landkind(2018)-1m/tianjin100.shp"
land_type_data <- st_read(land_type_path)
tianjin_shp <- vect(land_type_path)
# 设置矢量数据的 CRS
tianjin_shp <- project(tianjin_shp, target_crs)
tianjin_districts <- st_transform(tianjin_districts, target_crs)
# 确保所有数据的坐标参考系统一致
land_type_data <- st_transform(land_type_data, st_crs(tianjin_districts))
# 尝试修复土地类型数据的几何图形
land_type_data <- st_make_valid(land_type_data)
# 找出每个土地类型样本所在的行政区
district_indices <- st_intersects(land_type_data, tianjin_districts)
# 确保所有数据的坐标参考系统一致
land_type_data <- st_transform(land_type_data, st_crs(tianjin_districts))
# 找出每个土地类型样本所在的行政区
district_indices <- st_intersects(land_type_data, tianjin_districts)
# 提取每个地块的土壤特征
clay_values <- extract(clay_raster, tianjin_shp, fun = mean, na.rm = TRUE)
nitrogen_values <- extract(nitrogen_raster, tianjin_shp, fun = mean, na.rm = TRUE)
ph_values <- extract(ph_raster, tianjin_shp, fun = mean, na.rm = TRUE)
ocd_values <- extract(ocd_raster, tianjin_shp, fun = mean, na.rm = TRUE)
# 检查各列数据的行数
cat("clay_values 的行数：", length(clay_values), "\n")
cat("nitrogen_values 的行数：", length(nitrogen_values), "\n")
cat("ph_values 的行数：", length(ph_values), "\n")
cat("ocd_values 的行数：", length(ocd_values), "\n")
cat("tianjin_shp 的行数：", nrow(tianjin_shp), "\n")
cat("district_indices 的长度：", length(district_indices), "\n")
# 组织成数据框
soil_land_data <- data.frame(
clay = clay_values,
nitrogen = nitrogen_values,
ph = ph_values,
ocd = ocd_values,
亚类 = tianjin_shp$亚类,  # 目标变量
土类 = tianjin_shp$土类,  # 目标变量
土纲 = tianjin_shp$土纲,  # 目标变量
district = sapply(district_indices, function(x) if (length(x) > 0) tianjin_districts$name[x] else NA)
)
# 读取数据后统一设置 CRS
# 确保所有数据的 CRS 一致
target_crs <- "EPSG:4326"  # 假设目标 CRS 是 EPSG:4326，你可按需修改
clay_raster <- project(clay_raster, target_crs)
nitrogen_raster <- project(nitrogen_raster, target_crs)
ph_raster <- project(ph_raster, target_crs)
ocd_raster <- project(ocd_raster, target_crs)
tianjin_shp <- project(tianjin_shp, target_crs)
# 重新提取土壤特征数据
clay_values <- extract(clay_raster, vect(tianjin_shp), fun = mean, na.rm = TRUE)
# 重新提取土壤特征数据
clay_values <- extract(clay_raster, tianjin_shp, fun = mean, na.rm = TRUE)
nitrogen_values <- extract(nitrogen_raster, tianjin_shp, fun = mean, na.rm = TRUE)
ph_values <- extract(ph_raster, tianjin_shp, fun = mean, na.rm = TRUE)
ocd_values <- extract(ocd_raster, tianjin_shp, fun = mean, na.rm = TRUE)
# 再次检查各列数据的行数
cat("clay_values 的行数：", length(clay_values), "\n")
cat("nitrogen_values 的行数：", length(nitrogen_values), "\n")
cat("ph_values 的行数：", length(ph_values), "\n")
cat("ocd_values 的行数：", length(ocd_values), "\n")
cat("tianjin_shp 的行数：", nrow(tianjin_shp), "\n")
cat("district_indices 的长度：", length(district_indices), "\n")
# 组织成数据框
soil_land_data <- data.frame(
clay = clay_values,
nitrogen = nitrogen_values,
ph = ph_values,
ocd = ocd_values,
亚类 = tianjin_shp$亚类,  # 目标变量
土类 = tianjin_shp$土类,  # 目标变量
土纲 = tianjin_shp$土纲,  # 目标变量
district = sapply(district_indices, function(x) if (length(x) > 0) tianjin_districts$name[x] else NA)
)
